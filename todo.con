//
// NOTE: This todo is written in construct
//
defcon item (name symbol,
             depends optional pattern(nameless "dependsOn", dependList list),
             description string)
{
    // TODO: do something with the item
}


item DefaultValue "for optional pattern nodes, there should be a way to specify a default value"
item OptionalValue "I need to come up with semantics for optional values that aren't specified.  For nullable types, the default value (when the value isn't specified) could be null.  For non-nullable types, they could be wrapped in a tagged struct, that specifies whether the value is present or not.  struct OptionalValue { bool present; T value; }"


item EmitAndProcess "Develop the concept of emitting constructs, and processing them."
item JsonBackend "Create a backend that will write JSON."
item Enums "Think about defining an enum implementation, either in the language or in a library, not sure which."
item Structs "Create constructs to define and reference struct types."
item ConstructBackend "Create a backend that will write standard c-family construct code."
item ConstructBuild "Create constructs that can build."
item BackendInterface "Define the backend interface.  There should be a backend type, and a backend implementation.  The type of the backend indicates what the backend is written in.  This is used by the compiler to generate assets for the backend to use for it's implementationr.  For example, if the backend type is D Programming Language source code, then the compiler will generate data structures in the D programming language for each construct definition so the implementation can use those structures.  The backend imlementation can then use those structures process raw constructs into their generated data structures, and then the emitter use them again to emit code."
item ThinkAboutNamedItemsInLists "Not sure if lists should allows named items inside them.  If I can think of a case where they would make a lot of sense, I might add them."
item IdeaMultipleSyntax "It might be a good idea for the language to define a structure that allows you to modify the syntax you are using.  Say you are using the cfamily syntax, and in the middle you'd like to switch to some custom syntax, then the cfamily syntax could have a syntax that allows you to break into another syntax.  If I use this idea, this syntax switch should probably be defined in construct's source code data structures"
item CFrontEnd "Create a C Front end that will compile to Construct. Support C99, maybe C11. I don't think there's any reason to support a C89/C90/C95/C99 front end because I believe that any code written with those versions can be compiled by a C11 front end."
item UnitTestConstruct "Create a unittest construct that works similar to the D unittest block"
item CSharpFrontEnd "Note: I might be able to use Roslyn to help create a C# front end"
item LookAtWhiley "Whiley does a cool thing where it has pre and post conditions on it's functions.  This is a great idea that construct should have in it's standard library.  It also has 'flow-typing' which means that it can determine a variable's type based on conditions in the control flow."
item ThinkAboutStrings "Think about adding different syntax to the standardParser to specify strings."
item EvaluateTo dependsOn (NamedParams) "Implement the evaulateTo parameter on constructs."
item GenerateBackendConstructObjects "Generate backend data structures that can represent the constructs based on the construct definitions.