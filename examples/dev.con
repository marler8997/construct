// -*-mode: c;-*-
// Enables Syntax Highlighting for github and emacs

/*
This file is used to test features I'm developing for and features
that I'm trying to keep working while developing.
*/

import "util"

defcon each(items list, itemSymbol symbol, code constructBlock)
{
  foreach(item in items) {
    //letset resolveSymbolRef itemSymbol item;
    letset resolveSymbolRef itemSymbol item;
    exec code
  }
}
each (1 2 3) item { message "Item is: " item; }


message "Using the 'each' construct with numbers and strings:";
each(1 "hello" 2 "again" 3) item { message "Item is: " item; }

// TODO: joins the given strings
defcon join(strings listOf string) //returns=strings.type
{
  let totalLength 0;
  foreach(string_ in strings) {
    set totalLength add totalLength stringByteLength string_ itemType strings;
  }
  message "total string byte length is: " totalLength;

  let joined malloc totalLength;
  let dest joined;
  foreach(string_ in strings) {
    strcpy dest string_ itemType strings;
    // todo: put this in an ifContinue block
    set dest add dest string_.length
  }
  
  return joined;
}

join("Hello" ", " "World" "!")
//let joinedMessage join("Hello" ", " "World" "!");
//message joinedMessage;


// file io
deftype FileName;
defcon setFileName(this FileName, path listOf string)
{
  throw "set Filename listOf string not implemented";
}
/*
deftype systemString;
defcon buildFileName(nodes listOf systemString)
{
  
}
*/

//defcon makeFileName(path listOf string);

{
  //let tempFile = FileName 
}


// todo: add options
//defcon openFile (filename systemString) returns=pointer TODO: not implemented;
defcon openFile(filename FileName);

//("C:","temp","myfile")
//openFile("


/*
defcon not (value nullable) evalTo=bool {
  if /equals value null\ {
    return true;
  }
  return false;
}
*/
/* overrides not implemented
defcon not (value bool) evalTo=bool {
  if value /{
    return false;
  } else {
    return true;
  }
}
*/




/*
// TODO: make sure that addSymbolsToParentScope works recursively

expectFail {
  defcon import{} // import construct already defined in global scope
}
expectFail {
  defcon defcon{} // defcon construct already defined in global scope
}
scope {
  defcon import{}                // ok because defining inside another scope
  defcon defcon (name string) {} // ok because defining inside another scope
  defcon doesNothing;            // calls the new 'defcon' construct, which does nothing
  
  //TODO: Can't recover from this failure yet
  //expectFail {
  //  doesNothing;
  //}
}
expectFail {
  defcon "cantUseStringHere" {}
}
expectFail {
  defcon badAttributes addSymbolsToParentScope=true openScope=true;
}

expectFail {
  catch {} // not enough arguments
}


scope {
  defcon testNoScope (noScopeCode constructBlock) {
    exec addSymbolsToParentScope=true noScopeCode;
  }
  testNoScope {
    let noScopeVar = "the noScopeVar";
  }
  message noScopeVar;
}


expectFail {
  defcon unrecognizedNamedArg badName=false;
}

// Open Scope Test
scope {
  let x = "The x variable";
  defcon wontWork {
    message x;
  }
  defcon willWork openScope=true {
    message x;
  }
  expectFail {
    wontWork;
  }
  willWork;
}



// Call construct before it exists
forwardCallExample;
forwardCallExample; // call twice to make sure it works
defcon forwardCallExample {
  message "forward construct calls work!";
}


// Call construct before it exists with argument
messageWrapper "Calling a forward construct with a parameter!";
defcon messageWrapper (message utf8) {
  message message;
}
*/

// Call construct before it exists inside another scope
/* TODO: this doesn't work yet
scope {
  forwardCallInsideScopeExample;
}
*/
/* TODO: this doesn't work yet
defcon forwardCallInsideScopeExample () {
}
defcon wrapper () {
  forwardCallInsideConstructExample;
}
wrapper;
*/
/*
defcon forwardCallInsideConstructExample () {
}



// TODO: implement if
// TODO: implement forward references in a higher scope

// circular construct reference
// circularReferenceA 10; TODO; doesn't work yet
defcon circularReferenceA (value byte) {
  if /equals value 0\ {
    return;
  }
  // TODO: print value as well
  message "circularReferenceA";
  circularReferenceB /decrement 0;
}
defcon circularReferenceB (value byte) {
  if /equals value 0\ {
    return;
  }
  // TODO: print value as well
  message "circularReferenceB";
  circularReferenceA /decrement 0;
}



//let x "the string for variable x";
let x = "the string for variable x";
expectFail {
  let x = "defined twice";
}

// Call the construct with a symbol
message x; 




expectFail {
  defcon requiredParamsCantHaveDefault (value string null) {}
}

defcon implicitDefaultValue () (value string) {}
defcon explicitDefaultValue () (value string null) {}




if true {
  message "if true works!";
}
defcon trueConstruct evalTo=bool {
  return true;
}
defcon stringConstruct evalTo=string {
  return "a string";
}

expectFail {
  if /comment\ {
  }
}
expectFail {
  if /stringConstruct\ {
  }
}

if /trueConstruct\ {
  message "if trueConstruct works!";
}
*/
